Triggers in sql -

Trigger: A trigger is a stored procedure in database which automatically invokes whenever a special event in the database occurs. For example, a trigger can be invoked when a row is inserted into a specified table or when certain table columns are being updated.

Syntax:

create trigger [trigger_name] 
[before | after]  
{insert | update | delete}  
on [table_name]  
[for each row]  
[trigger_body] 
Explanation of syntax:

create trigger [trigger_name]: Creates or replaces an existing trigger with the trigger_name.
[before | after]: This specifies when the trigger will be executed.
{insert | update | delete}: This specifies the DML operation.
on [table_name]: This specifies the name of the table associated with the trigger.
[for each row]: This specifies a row-level trigger, i.e., the trigger will be executed for each row being affected.
[trigger_body]: This provides the operation to be performed as trigger is fired
BEFORE and AFTER of Trigger:
BEFORE triggers run the trigger action before the triggering statement is run.
AFTER triggers run the trigger action after the triggering statement is run.

Implementation of Trigger-
Creating a table named emp1

create table emp1
(
eno int,
ename varchar(10),
eadd varchar(10),
esal int,
doj datetime)

select * from emp1;
drop table emp1;
insert into emp1 values(1,'sid','gho',123,'07-09-2021')
insert into emp1 values(2,'yash','tembe',456,getdate())
insert into emp1 values(1,'sid','gho',10000,null)

drop table emp1;



//*TRIGGER*//
CREATE TRIGGER TRIGDELL3 ON STUDENT FOR DELETE AS PRINT 'DELETION IS NOT ALLOWED'
ROLLBACK TRANSACTION RETURN

//*getdate*//
create trigger triginsert1 
on emp1 
for insert
as
declare @modifieddate datetime
select @modifieddate = doj from inserted 
if(@modifieddate!=getdate())
begin
print'the modified date should be current date.hence cannot inserted.'
rollback transaction
return
end

//***update***//

create trigger triupdate4
on emp1
for update
as
if update(esal)
begin
declare @salary int
select @salary = esal
from emp1
if(@salary>9000)
begin
print'the salary cannot be more than 9000'
rollback transaction
end
end

update emp1 set esal=20000 where ename='yash';
